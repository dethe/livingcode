Happiness is a Warm Tiger

#published: 2005-05-03
#tags: Mac, Update, OS X
#type: Journal Post
#uuid: 5c97d9aa-312f-4e41-88a4-e1a974695cb9

My copy of Mac OS 10.4 arrived Friday, right on schedule. I spent the weekend backing up my laptop, doing a clean install, and then restoring my data, which also fixed the problem I've been having where applications take a really long time to launch. No problems so far and performance is noticeably faster. You gotta love an OS where each update makes your existing hardware faster.

First impressions: Spotlight searching really is as fast as they claim, Dashboard is neat in a gee-whiz sort of way, but I'm not sure how much I'll actually use it. The built-in dictionary and thesaurus are welcome additions. I'm sure with time I will come to use smart folders in both the Finder and Mail. But for me the real juice in this version is underneath the hood in the development tools.

I've had a few secret hopes for Tiger, for things which have not been announced, but might be slipped under the door. Three of them were: NSOutlineView gaining support for varying row height (to make it easier to write applications like OmniOutline), improved Cocoa support for QuickTime, and being able to round-trip Nibs to text format and back via nibtool. Well, two out of three ain't bad. The NSOutline now supports row height via it's delegate method <a href="http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/ObjC_classic/Classes/NSOutlineView.html#//apple_ref/doc/uid/20000110-BABHDHAE%22">heightOfRow:ofItem:</a>, the <a href="http://developer.apple.com/documentation/QuickTime/Reference/QTCocoaObjCKit/index.html#//apple_ref/doc/uid/TP40001164">QTKit</a> framework provides excellent support for QuickTime media from Cocoa (and thus from PyObjC), but alas, nibs cannot be created from text input via <a href="http://developer.apple.com/documentation/Darwin/Reference/ManPages/man1/nibtool.1.html">nibtool</a> (or any other tool that I'm aware of), although the nibtool man page does at least list this deficiency as a known bug.

But there is more good news in the <a href="http://developer.apple.com/documentation/GraphicsImaging/Reference/CoreImagingRef/index.html">Core Image</a>, <a href="http://developer.apple.com/documentation/MusicAudio/Reference/CoreAudio/book_intro/chapter_1_section_1.html">Core Audio</a>, and <a href="http://developer.apple.com/documentation/GraphicsImaging/Reference/CoreImagingRef/index.html">Core Data</a> frameworks. Core Image gives fast, powerful graphic processing and pipelining tools for both still images and video. Core Audio does the same for sound. And while Mac development in the Model-View-Controller (MVC) has been supported via Interface Builder (View), NSArrayController and NSObjectController (Controller), now with Core Data the Model portion is fully supported as well. Bill Bumgarner has a welcome <a href="http://www.pycs.net/bbum/2005/5/1/">example</a> on his blog of how to use CoreData from Python.

But wait, there's more! There's an <a href="http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/ObjC_classic/Classes/NSTreeController.html#//apple_ref/occ/cl/NSTreeController">NSTreeController</a> to go along with the NSArrayController and friends. There are hooks and documentation for many more of the Apple-supplied applications, including the new <a href="http://developer.apple.com/documentation/Cocoa/Reference/SyncServicesRef_ObjC/index.html">Sync Services</a>. And PyObjC now has wrappers for Core Data, Automator, XGrid, and Sync Services. And that's not to mention the improved WebKit, new features of NSTextView, and much more. It's a great time to be a Mac developer, and being able to do all this from Python really ices the cake for me.

